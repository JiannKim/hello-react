// 7장 컴포넌트의 라이프사이클 메서드
/*
    컴포넌트의 수명은 페이지에 렌더링되기 전인 준비 과정에서 시작하여 페이지에서 사라질 때 끝난다.
    리액트 프로젝트를 진행하다 보면 가끔 컴포넌트를 처음으로 렌더링할 때 어떤 작업을 처리해야 하거나
    컴포넌트를 업데이트하기 전후로 어떤 작업을 처리해야 할 수도 있고,
    불필요한 업데이트를 방지해야 할 수도 있다.

    이때는 컴포넌트의 라이프사이클 메서드를 사용한다.
    참고로 라이프사이클 메서드는 클래스형 컴포넌트에서만 사용할 수 있고,
    함수형 컴포넌트에서는 사용할 수 없다.
    그 대신 Hooks 기능을 사용하여 비슷한 작업을 처리할 수 있다.
 */

// 7.1 라이프사이클 메서드의 이해
/*
    라이프사이클의 메서드 종류는 총 아홉가지이다.
    Will 접두사가 붙은 메서드는 어떤 작업을 작동하기 전에 실행되는 메서드이고,
    Did 접두사가 붙은 메서드는 어떤 작업을 작동한 후에 실행되는 메서드이다.
    이 메서드들은 우리가 컴포넌트 클래스에서 덮어 써 선언함으로써 사용할 수 있다.

    라이프사이클은 총 세가지로 마운트, 업데이트, 언마운트 카테고리로 나눈다.
    우선 어떤 것들이 있는지 간단히 알아보고, 큰 흐름을 이해한 후 하나씩 살펴보자.

            ┏----- 리렌더링 -----┓
            ┃   (컴포넌트 정보    ┃
            ┃      업데이트)     ┃
            ┗----- 업데이트 ←----┛
                   ↑    ┃
             ┏-----┛    ┗-----┓
             ┃                ↓
           마운트            언마운트 
    (페이지에 컴포넌트가       (페이지에서
         나타남)          컴포넌트가 사라짐)
 */

/*
    // 마운트
    DOM이 생성되고 웹 브라우저에 나타나는 것을 마운트(mount)라고 한다.
    
    ** 마운트때 호출하는 메서드
        
       [ 컴포넌트 만들기 ]
              ↓
       [ constructor ]          // 컴포넌트를 새로 만들 때마다 호출되는 클래 생성자 메서드
              ↓
  [ getDerivedStateFromProps ]  // prop에 있는 값을 state에 넣을 때 사용하는 메서드
              ↓
          [ render ]            // UI를 렌더링하는 메서드
              ↓
     [ componentDidMount ]      // 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드

    // 업데이트
    컴포넌트는 다음과 같은 총 네 가지 경우에 업데이트 된다.
    - props가 바뀔 때
    - state가 바뀔 때
    - 부모 컴포넌트가 리렌더링될 때
    - this.forceUpdate로 강제 렌더링을 트리거할 때

    ** 업데이트 될 때 호출되는 메서드
        
        [ 업데이트를 발생시키는 요인 ]
(props 변경)(state 변경)(부모 컴포넌트 리렌더링)
                  ↓
        getDerivedStateFromProps
                  ↓
        shouldComponentUpdate
                  |
true 반환 시 render 호출, false 반환 시 여기서 작업 취소
                  ↓
                render  <--- forceUpdate
                  ↓
        getSnapshotBeforeUpdate
                  |
        웹 브라우저상의 실제 DOM 변화
                  ↓
          componentDidUpdate

    컴포넌트는 다양한 이유로 업데이트될 수 있다.
    1. 부모 컴포넌트에서 넘겨주는 props가 바뀔 때
    2. 컴포넌트 자신이 들고 있는 state가 setState를 통해 업데이트될 때
    3. 부모 컴포넌트가 리렌더링될 때

    // 언마운트
    ** 호출하는 메서드
       
        언마운트하기
            ↓
    componentWillUnmount    // 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드
*/
